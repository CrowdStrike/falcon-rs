name: ci

env:
  CARGO_TERM_COLOR: always

on:
  push:
    branches: [ main ] # this should be blocked entirely!
  pull_request:

jobs:
  fmt:
    runs-on: ubuntu-latest
    name: stable / fmt
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Install stable
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - name: cargo fmt --check
        run: cargo fmt --check

  clippy:
    runs-on: ubuntu-latest
    name: ${{ matrix.toolchain }} / clippy
    permissions:
      contents: read
      checks: write
    strategy:
      fail-fast: false
      matrix:
        toolchain: [stable, beta]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Install ${{ matrix.toolchain }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.toolchain }}
          components: clippy
      - name: cargo clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  doc:
    runs-on: ubuntu-latest
    name: nightly / doc
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Install nightly
        uses: dtolnay/rust-toolchain@nightly
      - name: cargo doc
        run: cargo doc --no-deps --all-features
        env:
          RUSTDOCFLAGS: --cfg docsrs

  hack:
    runs-on: ubuntu-latest
    name: ubuntu / stable / features
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Install stable
        uses: dtolnay/rust-toolchain@stable
      - name: cargo install cargo-hack
        uses: taiki-e/install-action@cargo-hack
      - name: cargo hack
        run: cargo hack --feature-powerset check

  msrv:
    runs-on: ubuntu-latest
    # we use a matrix here just because env can't be used in job names
    # https://docs.github.com/en/actions/learn-github-actions/contexts#context-availability
    strategy:
      matrix:
        msrv: [1.56.1] # edition 2021
    name: ubuntu / ${{ matrix.msrv }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Install ${{ matrix.msrv }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.msrv }}
      - name: cargo +${{ matrix.msrv }} check
        run: cargo check

  outdated:
    name: Outdated
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
      - uses: actions/checkout@v3
      - run: cargo outdated --exit-code 1

  block-fixup:
    name: Block fixup commits
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Block Fixup Commit Merge
        # https://github.com/13rac1/block-fixup-merge-action
        uses: 13rac1/block-fixup-merge-action@v2.0.0

  #
  # Checking that Cargo.lock is up to date
  #
  check-lockfile-uptodate:
    name: Check whether Cargo.lock is up to date
    runs-on: ubuntu-latest
    outputs:
      locks: ${{ steps.filter.outputs.locks }}
    steps:
      - uses: actions/checkout@v3

      - name: Retrieve MSRV from workspace Cargo.toml
        id: rust_version
        uses: SebRollen/toml-action@v1.0.2
        with:
          file: Cargo.toml
          field: "workspace.package.rust-version"

      - name: Enable toolchain via github action
        uses: dtolnay/rust-toolchain@master
        with:
          targets: armv7-unknown-linux-gnueabihf
          toolchain: ${{ steps.rust_version.outputs.value }}

      - uses: Swatinem/rust-cache@v2

      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            locks:
              - '**/Cargo.toml'

      - name: Check whether lockfile is up to date
        if: steps.filter.outputs.locks == 'true'
        run: cargo check --locked

  udeps:
    name: Check for unused dependencies
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.rust == 'true' || needs.changes.outputs.workflows == 'true' }}
    steps:
      - uses: actions/checkout@v3

      - name: Install nightly
        uses: dtolnay/rust-toolchain@nightly

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2

      - name: Run cargo-udeps
        run: |
          cargo install --git https://github.com/est31/cargo-udeps --locked
          cargo udeps --all-features --all-targets

      - name: Run cargo-udeps
        uses: aig787/cargo-udeps-action@v1
        with:
          version: 'v0.1.35'
          args: '--all-features'

  cargo-sort:
    name: Run cargo sort
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.rust == 'true' || needs.changes.outputs.workflows == 'true' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install stable
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo sort
        run: cargo install cargo-sort

      - name: Cargo sort
        run: cargo sort -w . --check

  cargo-fmt:
    name: Run cargo fmt
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.rust == 'true' || needs.changes.outputs.workflows == 'true' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # Nightly toolchain is needed for cargo fmt since issue: https://github.com/thin-edge/thin-edge.io/issues/1660
      # dtolnay/rust-toolchain is preferred over actions-rs/toolchain is currently not maintained and currently using
      # deprecated GHA api (see https://github.com/actions-rs/toolchain/issues/219).
      # However since dtolnay/rust-toolchain does not support the 'override' option, an additional call to
      # rustup override is required (see https://github.com/dtolnay/rust-toolchain/issues/29#issuecomment-1412903426)
      - name: Install nightly
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt

      - name: Cargo fmt --version
        run: cargo fmt --version

      - name: Cargo fmt
        run: cargo fmt -- --check

  cargo-clippy:
    name: Run cargo clippy
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: -D warnings
    needs: changes
    if: ${{ needs.changes.outputs.rust == 'true' || needs.changes.outputs.workflows == 'true' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install stable
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Enable cache
        # https://github.com/marketplace/actions/rust-cache
        uses: Swatinem/rust-cache@v2

      - name: Cargo clippy
        run: |
          cargo clippy --version
          cargo clippy --all-targets --all-features

  cargo-audit:
    name: Run cargo audit
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.rust == 'true' || needs.changes.outputs.workflows == 'true' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install stable
        uses: dtolnay/rust-toolchain@stable

      - name: Cargo audit
        run: cargo audit

  # Only run check if the project still compiles on MSRV, test are run on stable
  check-msrv:
    name: Run cargo check on MSRV
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.rust == 'true' || needs.changes.outputs.workflows == 'true' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Retrieve MSRV from workspace Cargo.toml
        id: rust_version
        uses: SebRollen/toml-action@v1.0.2
        with:
          file: Cargo.toml
          field: "workspace.package.rust-version"

      - name: Enable rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ steps.rust_version.outputs.value }}

      - name: Enable cache
        uses: Swatinem/rust-cache@v2

      - name: Run `cargo check`
        run: cargo check --all-targets --all-features

  cargo-test:
    name: Run cargo test
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: -D warnings
    needs: changes
    if: ${{ needs.changes.outputs.rust == 'true' || needs.changes.outputs.workflows == 'true' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Retrieve MSRV from workspace Cargo.toml
        id: rust_version
        uses: SebRollen/toml-action@v1.0.2
        with:
          file: Cargo.toml
          field: "workspace.package.rust-version"

      - name: Enable toolchain via github action
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview

      - name: Enable cache
        uses: Swatinem/rust-cache@v2

      - name: cargo install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: cargo llvm-cov
        run: cargo llvm-cov --no-fail-fast --locked --all-features --all-targets --codecov --output-path codecov.json

      # https://github.com/rust-lang/cargo/issues/6669
      - name: cargo test --doc
        run: cargo test --locked --all-features --doc

      - name: Upload to codecov.io
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: false

  shellcheck:
    name: Shellcheck
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Run ShellCheck
      uses: ludeeus/action-shellcheck@master

  typos:
    name: Spell Check with Typos
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: crate-ci/typos@v1.16.0
      continue-on-error: true
    - run: exit 0

  docs:
    runs-on: ubuntu-latest
    name: nightly / doc
    needs: changes
    if: ${{ needs.changes.outputs.rust == 'true' || needs.changes.outputs.workflows == 'true' }}
    steps:
      - uses: actions/checkout@v3

      - name: Enable cache
        uses: Swatinem/rust-cache@v2

      - name: Install stable
        uses: dtolnay/rust-toolchain@stable
      - name: cargo doc

        run: cargo doc --no-deps --all-features --workspace --exclude tedge_config_macros
